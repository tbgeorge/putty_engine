//=================================================================================
// StateMachine.hpp
// Author: Tyler George
// Date  : October 21, 2015
//=================================================================================

#pragma once

#ifndef __included_StateMachine__
#define __included_StateMachine__

#define State_e( stateEnum ) State( #stateEnum, stateEnum )

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------

#include <stack>
#include "Engine/Common/EngineCommon.hpp"
#include "Engine/Utilities/StringTable.hpp"


///---------------------------------------------------------------------------------
/// Structs
///---------------------------------------------------------------------------------

struct State
{
    State( std::string name, int stateID )
        : m_stateName( name ), m_stateID( stateID ) {}


    std::string m_stateName;
    int m_stateID;
};

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------


////===========================================================================================
///===========================================================================================
// StateMachine Class
///===========================================================================================
////===========================================================================================
class StateMachine
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    StateMachine( const std::string& stateMachineName );
    ~StateMachine();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------
    static void Shutdown();

	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    State& GetCurrentState();
    int GetCurrentStateID();
    std::string GetCurrentStateName();

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    void PushState( const State& newState );
    void PopState();

	///---------------------------------------------------------------------------------
	/// Public Member Variables
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Static Variables
	///---------------------------------------------------------------------------------


private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    std::stack< State > m_stateStack;
    std::string m_stateMachineName;

    static State* s_invalidState;
};

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif