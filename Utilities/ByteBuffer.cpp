//=================================================================================
// ByteBuffer.cpp
// Author: Tyler George
// Date  : January 27, 2016
//=================================================================================

////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================
#include "Engine/Utilities/ByteBuffer.hpp"
#include <memory.h>
#include <string.h>

////===========================================================================================
///===========================================================================================
// ByteBuffer class
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
//  Initialization
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void ByteBuffer::Startup( void* buffer, size_t maxSize )
{
    m_readIndex = 0;
    m_writeIndex = 0;

    m_maxSize = maxSize;
    m_buf = (unsigned char*) buffer;
        
}

////===========================================================================================
///===========================================================================================
// Accessors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
size_t ByteBuffer::GetLength() const
{
    return m_writeIndex;
}

///---------------------------------------------------------------------------------
/// Reads from buffer, copying data up to size into data
/// @return
///      number of bytes read, should equal size on success
///      if less than size, there was not enough data.
///      Advanced read index either way
///---------------------------------------------------------------------------------
size_t ByteBuffer::ReadBytes( void* out_data, size_t size )
{
    unsigned char* readStart = m_buf + m_readIndex;

    size_t remainingData = m_maxSize - m_readIndex;

    size_t amtToRead = 0;
    if (size <= remainingData)
        amtToRead = size;
    else
        amtToRead = remainingData;

    memcpy( out_data, readStart, amtToRead );

    m_readIndex += amtToRead;

    return amtToRead;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
size_t ByteBuffer::ReadString( char*& out_str )
{
    char* str = (char*)(m_buf + m_readIndex);
    char* curr = str;
    size_t remainingData = m_maxSize - m_readIndex;
    size_t i = 0;
    while ((*curr != NULL) && (i < remainingData))
    {
        ++curr;
        ++i;
    }

    if (*curr != NULL)
    {
        out_str = nullptr;
        return 0; // not a valid string, never null terminated
    }
    else
    {
        m_readIndex += i + 1;
        out_str = str;
        return i + 1;
    }

}



////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void ByteBuffer::SetLength( size_t len )
{
    m_writeIndex = len;
}

///---------------------------------------------------------------------------------
/// When you write, you write to the end of the buffer
/// @return
///     true: was enough room and was written
///      false: not enough room and was not written
///---------------------------------------------------------------------------------
bool ByteBuffer::WriteBytes( void* data, size_t size )
{
    // can write
    if (size <= GetRemainingSize())
    {
        unsigned char* writeStart = m_buf + m_writeIndex;
        memcpy( writeStart, data, size );

        m_writeIndex += size;
        return true;
    }

    // can't write
    else
        return false;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
bool ByteBuffer::WriteByte( unsigned char byte )
{
    return WriteBytes( (void*)&byte, 1 );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
bool ByteBuffer::WriteString( const char* str )
{
    size_t len = strlen( str );
    if (len > 0)
        WriteBytes( (void*)str, len );

    return WriteByte( 0 );
}