//=================================================================================
// BitArray.cpp
// Author: Tyler George
// Date  : February 17, 2016
//=================================================================================

////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================
#include "Engine/Utilities/BitArray.hpp"
#include "Engine/Utilities/Error.hpp"

////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
BitArray::BitArray( void* buffer, size_t len, bool initialValue )
{
    m_buffer = (unsigned char*)buffer;
    m_bufferLen = len;
    Reset( initialValue );
}


////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
bool BitArray::IsSet( size_t index )
{
    const size_t byteIndex = index / 8;
    const size_t bitIndex = index % 8;
    FATAL_ASSERT( byteIndex < m_bufferLen );

    const unsigned char byte = m_buffer[byteIndex];
    return (byte & (1 << bitIndex)) != 0;
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void BitArray::Set( size_t index )
{
    const size_t byteIndex = index / 8;
    const size_t bitIndex = index % 8;
    FATAL_ASSERT( byteIndex < m_bufferLen );

    unsigned char byte = m_buffer[byteIndex];
    byte = byte | (1 << bitIndex);
    m_buffer[byteIndex] = byte;

}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void BitArray::Unset( size_t index )
{
    const size_t byteIndex = index / 8;
    const size_t bitIndex = index % 8;
    FATAL_ASSERT( byteIndex < m_bufferLen );

    unsigned char byte = m_buffer[byteIndex];
    byte = byte & ~(1 << bitIndex);
    m_buffer[byteIndex] = byte;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void BitArray::Reset( bool value )
{
    if (value)
        memset( m_buffer, 0xFF, m_bufferLen );
    else
        memset( m_buffer, 0x00, m_bufferLen );
}