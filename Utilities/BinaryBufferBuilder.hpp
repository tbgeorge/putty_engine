//=================================================================================
// BinaryBufferBuilder.hpp
// Author: Tyler George
// Date  : August 25, 2015
//=================================================================================

#pragma once

#ifndef __included_BinaryBufferBuilder__
#define __included_BinaryBufferBuilder__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include "Engine/Common/EngineCommon.hpp"
#include "Engine/Math/Matrix4.hpp"
#include "Engine/Utilities/FileUtilities.hpp"


///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------


////===========================================================================================
///===========================================================================================
// BinaryBufferBuilder Class
///===========================================================================================
////===========================================================================================
class BinaryBufferBuilder
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    BinaryBufferBuilder( size_t estimatedSize );
    ~BinaryBufferBuilder();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    bool WriteBufferToFile( const std::string& filePath ) const;

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    void AppendChar( const char& c );
    void AppendShort( const short& s );
    void AppendInt( const int& i );
    void AppendUnsignedChar( const unsigned char& uc );
    void AppendUnsignedShort( const unsigned short& us );
    void AppendUnsignedInt( const unsigned int& ui );
    void AppendFloat( const float& f );
    void AppendDouble( const double& d );
    void AppendBool( const bool& b );
    void AppendString( const std::string& s );
    void AppendVector2( const Vector2& v2 );
    void AppendVector3( const Vector3& v3 );
    void AppendVector4f( const Vector4f& v4f );
    void AppendVector4d( const Vector4d& v4d );
    void AppendMatrix4f( const Matrix4f& m4f );
    void AppendMatrix4d( const Matrix4d& m4d );
    void AppendRgba( const Rgba& rgba );

	///---------------------------------------------------------------------------------
	/// Update
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Render
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Public Member Variables
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Static Variables
	///---------------------------------------------------------------------------------


private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    ByteVector m_buffer;
    size_t m_bufferPosition;
};

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif