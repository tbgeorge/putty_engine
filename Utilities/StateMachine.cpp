//=================================================================================
// StateMachine.cpp
// Author: Tyler George
// Date  : October 21, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "Engine/Utilities/StateMachine.hpp"
#include "Engine/Utilities/DeveloperConsole.hpp"

////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================

State* StateMachine::s_invalidState = new State( "INVALID", -1 );

////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
StateMachine::StateMachine( const std::string& stateMachineName )
    : m_stateMachineName( stateMachineName )
{
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
StateMachine::~StateMachine()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void StateMachine::Shutdown()
{
    delete s_invalidState;
}

////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
State& StateMachine::GetCurrentState()
{
    if ( !m_stateStack.empty() )
        return m_stateStack.top();

    return *s_invalidState;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
int StateMachine::GetCurrentStateID()
{
    if (!m_stateStack.empty())
        return m_stateStack.top().m_stateID;

    return s_invalidState->m_stateID;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
std::string StateMachine::GetCurrentStateName()
{
    if (!m_stateStack.empty())
        return m_stateStack.top().m_stateName;

    return s_invalidState->m_stateName;
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void StateMachine::PushState( const State& newState )
{
    if (!m_stateStack.empty())
    {
        State& currentState = GetCurrentState();
        if (currentState.m_stateID == newState.m_stateID)
            DeveloperConsole::WriteLine( m_stateMachineName + " -- Resetting State: " + newState.m_stateName, WARNING_TEXT_COLOR );
    }

    m_stateStack.push( newState );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void StateMachine::PopState()
{
    if (!m_stateStack.empty())
    {
        m_stateStack.pop();
        if (m_stateStack.empty())
            DeveloperConsole::WriteLine( m_stateMachineName + " -- Popped last state off of this state machine.", WARNING_TEXT_COLOR );
    }

    else
        DeveloperConsole::WriteLine( m_stateMachineName + " -- state machine is empty.", ERROR_TEXT_COLOR );
}


////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

