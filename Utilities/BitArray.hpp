//=================================================================================
// BitArray.hpp
// Author: Tyler George
// Date  : February 1, 2016
//=================================================================================
#pragma once

#ifndef __included_BitArray__
#define __included_BitArray__


///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------

///---------------------------------------------------------------------------------
/// BitArray class
///---------------------------------------------------------------------------------
class BitArray
{

public:
    ///---------------------------------------------------------------------------------
    /// Constructors/Destructors
    ///---------------------------------------------------------------------------------
    BitArray( void* buffer, size_t len, bool initialValue );

    ///---------------------------------------------------------------------------------
    /// Accessors/Queries
    ///---------------------------------------------------------------------------------
    bool IsSet( size_t index );
    
    ///---------------------------------------------------------------------------------
    /// Mutators
    ///---------------------------------------------------------------------------------
    void Set( size_t index );
    void Unset( size_t index );
    void Reset( bool value );

private:
    ///---------------------------------------------------------------------------------
    /// Private member variables
    ///---------------------------------------------------------------------------------
    unsigned char* m_buffer;
    size_t m_bufferLen;

};

template <size_t BIT_SIZE>
class TBitArray : public BitArray
{
public:
    TBitArray( bool initialValue )
        : BitArray( m_fixedBuffer, (BIT_SIZE + 7) / 8, initialValue ) {}

    TBitArray()
        : BitArray( m_fixedBuffer, (BIT_SIZE + 7) / 8, false ) {}

private:
    unsigned char m_fixedBuffer[(BIT_SIZE + 7) / 8];
};


#endif