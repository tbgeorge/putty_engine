//=================================================================================
// Thread.hpp
// Author: Tyler George
// Date  : November 5, 2015
//=================================================================================

#pragma once

#ifndef __included_Thread__
#define __included_Thread__


///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include "Engine/Common/EngineCommon.hpp"

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------
typedef void (ThreadEntryCallback)( void* arg );

////===========================================================================================
///===========================================================================================
// Thread Class
///===========================================================================================
////===========================================================================================
class Thread
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    Thread();
    ~Thread();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------
    bool Start( const char* name );

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    void Detach();
    void Join();

protected:
    ///---------------------------------------------------------------------------------
    /// Protected Mutators
    ///---------------------------------------------------------------------------------
    virtual void Run() = 0;
    void yield();
    void Sleep( unsigned int ms );

private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------
    Thread( const Thread& copy ) = delete;

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    void* m_threadHandle;

    ///---------------------------------------------------------------------------------
    /// Friend Functions
    ///---------------------------------------------------------------------------------
    friend void ThreadClassEntry( void* arg );
};

void* ThreadCreate( const char* name, ThreadEntryCallback* entry, void* arg );

void ThreadDetach( void* handle );
void ThreadJoin( void* handle );
void ThreadYield();
void ThreadSleep( unsigned int ms );

unsigned long ThreadGetCurrentID();
unsigned long ThreadGetID( void* handle );

#endif