//=================================================================================
// ThreadSafeQueue.hpp
// Author: Tyler George
// Date  : November 5, 2015
//=================================================================================

#pragma once

#ifndef __included_ThreadSafeQueue__
#define __included_ThreadSafeQueue__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include <queue>
#include "Engine/Common/EngineCommon.hpp"
#include "Engine/Multi-Threading/Locks.hpp"

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------


////===========================================================================================
///===========================================================================================
// ThreadSafeQueue Class
///===========================================================================================
////===========================================================================================
template <typename type>
class ThreadSafeQueue
{
public:	
	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    size_t Size() const;

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    void Enqueue( type &item );
    bool Dequeue( type *out );


private:
	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    mutable CriticalSection cs;
    std::queue<type> queue;
};

///---------------------------------------------------------------------------------
/// Templated function implementations
///---------------------------------------------------------------------------------

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
template <typename type>
size_t ThreadSafeQueue<type>::Size() const
{
    size_t size = 0;
    cs.Enter();
    size = queue.size();
    cs.Exit();

    return size;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
template <typename type>
void ThreadSafeQueue<type>::Enqueue( type &item )
{
    cs.Enter();
    queue.push( item );
    cs.Exit();
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
template <typename type>
bool ThreadSafeQueue<type>::Dequeue( type *out )
{
    bool success = false;
    cs.Enter();
    if (queue.size() > 0)
    {
        *out = queue.front();
        queue.pop();
        success = true;
    }
    cs.Exit();
    return success;
}

#endif