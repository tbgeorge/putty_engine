//=================================================================================
// JobManager.cpp
// Author: Tyler George
// Date  : November 5, 2015
//=================================================================================

////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================
#include "Engine/Multi-Threading/JobManager.hpp"
#include <string>

////===========================================================================================
///===========================================================================================
// Static variable initialization
///===========================================================================================
////===========================================================================================

JobManager JobManager::s_theJobManager;

////===========================================================================================
///===========================================================================================
// JobThread Class
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================
    
///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
JobThread::JobThread( JobManager* manager )
    : m_jobManager( manager )
{

}


////===========================================================================================
///===========================================================================================
// Protected Mutators
///===========================================================================================
////===========================================================================================
    
///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobThread::Run()
{
    while (m_jobManager->IsRunning())
    {
        ProcessAllJobs();
        yield();
    }

    ProcessAllJobs();
}

////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================
   
///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobThread::ProcessAllJobs()
{
    while (m_jobManager->RunJob());
}


////===========================================================================================
///===========================================================================================
// JobManager Class
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
JobManager::~JobManager()
{
}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================
    
///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobManager::Startup( int numThreads )
{
    s_theJobManager.m_isRunning = true;
    s_theJobManager.AddThreads( numThreads );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobManager::Shutdown()
{
    s_theJobManager.m_isRunning = false;

    while (s_theJobManager.m_threads.size() > 0)
    {
        Thread* thread = s_theJobManager.m_threads.front();
        thread->Join();
        delete thread;

        s_theJobManager.m_threads.pop_front();
    }
    // clean up finished jobs
    Update();
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================
    
///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobManager::AddNewJob( Job* job, JobCompleteCallback* onComplete, void* arg, JobPriority priority )
{
    job->m_completeCallback = onComplete;
    job->m_callbackArg = arg;

    s_theJobManager.m_queuedJobs[priority].Enqueue( job );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobManager::Update()
{
    if (s_theJobManager.m_threads.size() == 0) 
        s_theJobManager.RunJob();

    // TODO: add timer so that this never takes longer than say 5 ms
    Job* finishedJob;
    while (s_theJobManager.m_finishedJobs.Dequeue( &finishedJob ))
    {
        if (finishedJob->m_completeCallback != nullptr)
            finishedJob->m_completeCallback(finishedJob->m_callbackArg);

        delete finishedJob;
    }
}

////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
JobManager::JobManager()
{
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void JobManager::AddThreads( int numThreads )
{
    for (int threadNum = 0; threadNum < numThreads; ++threadNum)
    {
        JobThread* jobThread = new JobThread( this );
        jobThread->Start( std::string("JobThread_" + std::to_string( threadNum )).c_str() );

        m_threads.push_back( jobThread );
    }
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
bool JobManager::RunJob()
{
    Job* job;

    for (int p = JP_HIGH; p >= JP_LOW; --p)
    {
        if (m_queuedJobs[p].Dequeue( &job ))
        {
            job->Run();

            // if the job doesn't have a complete callback, delete it
            if (job->m_completeCallback == nullptr)
                delete job;
            else
                m_finishedJobs.Enqueue( job );

            return true;
        }
    }

    return false;

}

////===========================================================================================
///===========================================================================================
// External Functions
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
unsigned int SystemGetCoreCount()
{
    SYSTEM_INFO sysinfo;
    GetSystemInfo( &sysinfo );

    return (unsigned int)sysinfo.dwNumberOfProcessors;
}

