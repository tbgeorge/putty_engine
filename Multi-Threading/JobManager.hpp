//=================================================================================
// JobManager.hpp
// Author: Tyler George
// Date  : November 5, 2015
//=================================================================================

#pragma once

#ifndef __included_JobManager__
#define __included_JobManager__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------

#include <list>
#include "Engine/Common/EngineCommon.hpp"
#include "Engine/Multi-Threading/ThreadSafeQueue.hpp"
#include "Engine/Multi-Threading/Thread.hpp"

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------
typedef void (JobCompleteCallback)( void *arg );

///---------------------------------------------------------------------------------
/// Enums
///---------------------------------------------------------------------------------
enum JobPriority
{
    JP_LOW,
    JP_MEDIUM,
    JP_HIGH,
    JP_COUNT
};


////===========================================================================================
///===========================================================================================
// Job Class
///===========================================================================================
////===========================================================================================
class Job
{
    friend class JobManager;

public:
    ///---------------------------------------------------------------------------------
    /// Mutators
    ///---------------------------------------------------------------------------------
    virtual void Run() = 0;
    void SetCallbackArg( void* arg ) { m_callbackArg = arg; }

private:
    ///---------------------------------------------------------------------------------
    /// Private Member variables
    ///---------------------------------------------------------------------------------
    JobCompleteCallback* m_completeCallback;
    void* m_callbackArg; // arg to send to callback function
};


////===========================================================================================
///===========================================================================================
// JobThread Class
///===========================================================================================
////===========================================================================================
class JobThread : public Thread
{
public:
    ///---------------------------------------------------------------------------------
    /// Constructors/Destructors
    ///---------------------------------------------------------------------------------
    JobThread( JobManager* manager );

protected:
    ///---------------------------------------------------------------------------------
    /// Protected Mutators
    ///---------------------------------------------------------------------------------
    virtual void Run();

private:
    ///---------------------------------------------------------------------------------
    /// Private functions
    ///---------------------------------------------------------------------------------
    void ProcessAllJobs();

    ///---------------------------------------------------------------------------------
    /// Private member variables
    ///---------------------------------------------------------------------------------
    JobManager* m_jobManager;

};

////===========================================================================================
///===========================================================================================
// JobManager Class
///===========================================================================================
////===========================================================================================
class JobManager
{
    friend class JobThread;

public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    ~JobManager();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------
    static void Startup( int numThreads );
    static void Shutdown();

	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    static inline bool IsRunning() { return s_theJobManager.m_isRunning; }

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    static void AddNewJob( Job* job, JobCompleteCallback* onComplete, void* arg, JobPriority priority = JP_MEDIUM );
    static void Update();

private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------
    JobManager();

    void AddThreads( int numThreads );
    bool RunJob();


	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    bool m_isRunning;
    std::list< Thread* > m_threads;

    ThreadSafeQueue< Job* > m_queuedJobs[JP_COUNT];
    ThreadSafeQueue< Job* > m_finishedJobs;

    ///---------------------------------------------------------------------------------
    /// Private Static member variables
    ///---------------------------------------------------------------------------------
    static JobManager s_theJobManager;
};

unsigned int SystemGetCoreCount();

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif