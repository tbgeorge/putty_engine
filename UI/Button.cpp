//=================================================================================
// Button.cpp
// Author: Tyler George
// Date  : October 26, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "Engine/UI/Button.hpp"
#include "../Utilities/DeveloperConsole.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================



////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Button::Button( OpenGLRenderer* renderer, UIElement* parent, Font* font, int fontSize, Texture* image, const Vector2& size,
    Anchor anchor /* = BOTTOM_LEFT */, const Vector2& offset /* = Vector2::ZERO */, const float& zVal /* = 1.0f */,
    const Rgba& fontColor /* = Rgba() */, const std::string& text /* = "" */, Texture* hoverImage /* = nullptr */, const Rgba& hoverFontColor /* = Rgba() */ )
    : UIElement( renderer, parent )
    , m_hoverImage( hoverImage )
    , m_hoverFontColor( hoverFontColor )
    , m_isEnabled( true )
    , m_disabledFontColor( Rgba::GREY )
{
    m_defaultImage = image;
    m_hoverImage = hoverImage;

    m_fontColor = fontColor;
    m_hoverFontColor = hoverFontColor;

    m_zVal = zVal;
    m_anchor = anchor;
    m_offset = offset;
    m_size = size;

    Vector2 mins = CalculatePosition();

    m_bounds.m_mins = mins;
    m_bounds.m_maxs = mins + m_size;
    CalcVerts();

    m_textbox = new TextBox( renderer, this, font, fontSize, CENTER_CENTER, Vector2::ZERO, fontColor, text, zVal - 0.1f );
    m_image = new Image( renderer, this, image, m_size, BOTTOM_LEFT, Vector2::ZERO, zVal );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Button::~Button()
{
    delete m_textbox;
    delete m_image;
}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void Button::ProcessInput( InputSystem* inputSystem )
{
    if (m_isEnabled)
    {
        m_wasJustClicked = false;
        Vector2 mousePos = inputSystem->GetMousePosition();

        if (m_bounds.IsPointInside( mousePos ))
        {
            m_mouseIsHoveringOver = true;

            if (inputSystem->WasMouseButtonJustReleased( MOUSE_LEFT ))
            {
                m_wasJustClicked = true;
            }
        }
        else
            m_mouseIsHoveringOver = false;
    }
    else
    {
        m_wasJustClicked = false;
        m_mouseIsHoveringOver = false;
    }
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void Button::Update( bool debugModeEnabled )
{
    UNUSED( debugModeEnabled );

    if (m_mouseIsHoveringOver)
    {
        if ( m_hoverImage )
            m_image->SetImage( m_hoverImage );
        m_textbox->SetFontColor( m_hoverFontColor );
    }
    else if (!m_isEnabled)
    {
        m_image->SetImage( m_defaultImage );
        m_textbox->SetFontColor( m_disabledFontColor );
    }
    else
    {
        m_image->SetImage( m_defaultImage );
        m_textbox->SetFontColor( m_fontColor );
    }
}


////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void Button::Render( bool debugModeEnabled )
{
    if (!m_renderer)
        return;

    if ( debugModeEnabled && m_mouseIsHoveringOver)
    {
        PUC_Vertexes verts;

        verts.push_back( Vertex3D_PUC( Vector3( m_bounds.m_mins.x, m_bounds.m_mins.y, m_zVal - 0.1f ), Vector2::ZERO, Rgba::BLACK ) ); // 0
        verts.push_back( Vertex3D_PUC( Vector3( m_bounds.m_maxs.x, m_bounds.m_mins.y, m_zVal - 0.1f ), Vector2::ZERO, Rgba::BLACK ) ); // 1
        verts.push_back( Vertex3D_PUC( Vector3( m_bounds.m_maxs.x, m_bounds.m_maxs.y, m_zVal - 0.1f ), Vector2::ZERO, Rgba::BLACK ) ); // 2
        verts.push_back( Vertex3D_PUC( Vector3( m_bounds.m_mins.x, m_bounds.m_maxs.y, m_zVal - 0.1f ), Vector2::ZERO, Rgba::BLACK ) ); // 3

        m_renderer->SetLineSize( 5.0f );
        m_renderer->DrawVertexesOrtho( NULL, verts, GL_LINE_LOOP );
    }

    m_image->Render( debugModeEnabled );
    m_textbox->Render( debugModeEnabled );



}

////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

