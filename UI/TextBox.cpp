//=================================================================================
// TextBox.cpp
// Author: Tyler George
// Date  : October 26, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "Engine/UI/TextBox.hpp"
#include "../Utilities/DeveloperConsole.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================



////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
TextBox::TextBox( OpenGLRenderer* renderer, UIElement* parent, Font* font, int fontSize, 
    Anchor anchor /* = BOTTOM_LEFT */, const Vector2& offset /* = Vector2::ZERO */, const Rgba& fontColor /* = Rgba() */, const std::string& text /* = "" */, const float& zVal /* = 1.0f */ )
    : UIElement( renderer, parent )
    , m_font( font )
    , m_fontColor( fontColor )
    , m_text( text )
    , m_fontSize( fontSize )
{
    m_zVal = zVal;
    m_offset = offset;
    m_anchor = anchor;

    UpdateVariables();
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
TextBox::~TextBox()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void TextBox::SetText( const std::string& text )
{
    m_text = text;
    UpdateVariables();
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void TextBox::SetFontSize( int fontSize )
{
    m_fontSize = fontSize;
    UpdateVariables();
}

////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void TextBox::ProcessInput( InputSystem* inputSystem )
{
    UNUSED( inputSystem );

}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void TextBox::Update( bool debugModeEnabled )
{
    UNUSED( debugModeEnabled );
}


////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void TextBox::Render( bool debugModeEnabled )
{
    UNUSED( debugModeEnabled );

    if (!m_renderer)
        return;
    FontRenderer* fontRenderer = m_renderer->GetFontRenderer();

    if (m_verts.size() > 0)
    {
        if (m_font)
        {
            Vector3 textPos( m_bounds.m_mins.x, m_bounds.m_mins.y, m_zVal );

            m_renderer->Enable( GL_BLEND );
            m_renderer->BlendFunct( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );

            fontRenderer->DrawFontTextOrtho( m_fontSize, *m_font, m_text, textPos, m_fontColor );

        }

    }


}

////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void TextBox::UpdateVariables()
{
    float textWidth = FontRenderer::CalcTextWidth( m_fontSize, *m_font, m_text );
    m_size = Vector2( textWidth, (float) m_fontSize );

    Vector2 mins = CalculatePosition();
    m_bounds.m_mins = mins;
    m_bounds.m_maxs = mins + m_size;

    CalcVerts();
}